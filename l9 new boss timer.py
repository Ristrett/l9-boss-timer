# -*- coding: utf-8 -*-
# ===== L9 Boss Timer (Hybrid: interval from sheet, fixed & world fixed times) =====

import os, re, time, asyncio
from datetime import datetime, date, timedelta
from typing import Optional, Tuple, List

import json
from aiohttp import web

import pytz
import gspread
import discord
from discord.ext import commands, tasks
from discord.ext.commands import has_permissions
from discord.ui import View, Button
from discord import Interaction
from oauth2client.service_account import ServiceAccountCredentials

# ========= ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Discord =========
app_prefix = "!"
TOKEN = os.getenv("DISCORD_TOKEN") or "MTQwNDE2MTcxMTYyMzI0MTc1OQ.GIHFcE.sJ71c7bkJd5PR3SOhp1e0KYaS5tI1daASeYOIw"   # ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô ENV

# ========= ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Google Sheet =========
SPREADSHEET_ID   = os.getenv("SPREADSHEET_ID", "1Ps_sLYIA3j9WWyrP7kLN4g-kPaN_rPBTqSmsxzxzarQ")  # <- ‡πÑ‡∏≠‡∏î‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
SPREADSHEET_URL  = ""        # ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ß‡πà‡∏≤‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏î‡∏™‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏∑‡πà‡∏ô‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏à
SPREADSHEET_NAME = ""        # ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ß‡πà‡∏≤‡∏á (‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ ID ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå)

# ‡πÉ‡∏ä‡πâ ‚Äú‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ó‡πá‡∏ö‡πÅ‡∏ö‡∏ö‡∏ï‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‚Äù
PRIMARY_WS   = "boss_timer"
FALLBACK_WS  = "Boss Tracker"
READ_RANGE   = "A1:K2000"   # A..K = 11 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ï‡∏≤‡∏°‡∏ä‡∏µ‡∏ï

# ‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
CHANNEL_ID_DEFAULT = 1404159701750382673
SHEET_CHANNEL_MAP = {
    PRIMARY_WS: CHANNEL_ID_DEFAULT,
    FALLBACK_WS: CHANNEL_ID_DEFAULT,
    "Fixed": CHANNEL_ID_DEFAULT,   # ‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ‡∏™‡πà‡∏á world/fixed ‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î
}

# ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
ROLE_ID_1 = 1402706627886321724
ROLE_ID_2 = 1402025046850932856

ALERT_THRESHOLDS_MIN = [60, 30, 5]   # ‡πÄ‡∏ß‡∏¥‡∏•‡∏î‡πå‡∏ö‡∏≠‡∏™‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÅ‡∏Ñ‡πà T-5 ‡πÅ‡∏ö‡∏ö‡∏£‡∏ß‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
ALERT_WINDOW_SEC = 75

# UI
DEFAULT_EMBED_COLOR = 0xffcc00
NORMAL_EMOJI = "üí†"
WORLD_EMOJI  = "üåç"

# ‡πÄ‡∏ß‡∏¥‡∏•‡∏î‡πå‡∏ö‡∏≠‡∏™
WORLD_BOSSES = {"‡∏•‡∏≤‡∏ï‡∏±‡∏ô", "‡∏û‡∏≤‡∏£‡πå‡πÇ‡∏ï", "‡πÄ‡∏ô‡∏î‡∏£‡πâ‡∏≤"}
NAME_ALIASES = {"‡∏û‡∏≤‡∏£‡πå‡πÇ‡∏ï‡πâ": "‡∏û‡∏≤‡∏£‡πå‡πÇ‡∏ï"}  # ‡∏Å‡∏±‡∏ô‡∏™‡∏∞‡∏Å‡∏î

def normalize_name(n: str) -> str:
    n = (n or "").strip()
    return NAME_ALIASES.get(n, n)

def is_world_boss(name: str) -> bool:
    return normalize_name(name.replace(" (‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ)", "").strip()) in WORLD_BOSSES

tz = pytz.timezone("Asia/Bangkok")

# === Mini Web for health/status on Koyeb ===
STARTED_AT = datetime.now(tz)

async def handle_root(request):
    return web.Response(text="L9 Boss Timer Bot is running.")

async def handle_healthz(request):
    now = datetime.now(tz)
    payload = {
        "ok": True,
        "now": now.strftime("%Y-%m-%d %H:%M:%S %Z"),
        "uptime_sec": int((now - STARTED_AT).total_seconds()),
        "spreadsheet_id": os.getenv("SPREADSHEET_ID", ""),
        "worksheet": PRIMARY_WS,
    }
    return web.json_response(payload)

async def start_http_server():
    app = web.Application()
    app.router.add_get("/", handle_root)
    app.router.add_get("/healthz", handle_healthz)
    # Koyeb ‡∏à‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î PORT ‡πÉ‡∏´‡πâ‡πÉ‡∏ô ENV ‡πÄ‡∏™‡∏°‡∏≠
    port = int(os.getenv("PORT", "8080"))
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()





# ========= Discord client =========
intents = discord.Intents.default()
intents.message_content = True
allowed_mentions = discord.AllowedMentions(roles=True)
bot = commands.Bot(command_prefix=app_prefix, intents=intents, allowed_mentions=allowed_mentions)

def log(msg: str):
    print(datetime.now(tz).strftime("[%H:%M:%S]"), msg)

# ========= Google Sheets helper =========
SCOPES = ["https://www.googleapis.com/auth/spreadsheets","https://www.googleapis.com/auth/drive"]

def gspread_client():
    # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå credentials.json ‡∏à‡∏≤‡∏Å ENV ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    creds_json = os.getenv("GOOGLE_CREDENTIALS_JSON")
    if creds_json:
        with open("credentials.json", "w", encoding="utf-8") as f:
            f.write(creds_json)

    creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", SCOPES)
    return gspread.authorize(creds), creds


def open_spreadsheet(client):
    if SPREADSHEET_ID:   return client.open_by_key(SPREADSHEET_ID), "ID"
    if SPREADSHEET_URL:  return client.open_by_url(SPREADSHEET_URL), "URL"
    if SPREADSHEET_NAME: return client.open(SPREADSHEET_NAME), "NAME"
    raise RuntimeError("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î SPREADSHEET_ID / URL / NAME")

def values_get_ws(ss, ws_title, a1_range=READ_RANGE):
    rng = f"'{ws_title}'!{a1_range}"
    return ss.values_get(rng).get("values", [])

# ========= Parsing / utils =========
BAD_TOKENS = {"", "-", "#VALUE!", "NA", "N/A", "None", "null", "NULL"}
TIME_RE   = re.compile(r"^\s*(\d{1,2})[:\.](\d{2})(?::(\d{2}))?\s*$")   # HH:MM[:SS]
WINDOW_RE = re.compile(r"(\d{1,2}:\d{2})\s*[‚Äì\-]\s*(\d{1,2}:\d{2})")
HOURS_RE  = re.compile(r"(\d+)\s*‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á", re.I)

WEEKDAY_THAI = ["‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå","‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£","‡∏û‡∏∏‡∏ò","‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ","‡∏®‡∏∏‡∏Å‡∏£‡πå","‡πÄ‡∏™‡∏≤‡∏£‡πå","‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå"]
WEEKDAY_MAP  = {"‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå":0,"‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£":1,"‡∏û‡∏∏‡∏ò":2,"‡∏û‡∏§‡∏´‡∏±‡∏™":3,"‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ":3,"‡∏®‡∏∏‡∏Å‡∏£‡πå":4,"‡πÄ‡∏™‡∏≤‡∏£‡πå":5,"‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå":6}

def weekday_th(dt: datetime) -> str:
    return WEEKDAY_THAI[dt.weekday()]

def parse_time_of_day(raw) -> Optional[Tuple[int,int,int]]:
    if raw is None: return None
    s = str(raw).strip()
    if s in BAD_TOKENS: return None
    m = TIME_RE.match(s)
    if not m: return None
    hh, mm = int(m.group(1)), int(m.group(2))
    ss = int(m.group(3) or 0)
    if not (0 <= hh <= 23 and 0 <= mm <= 59 and 0 <= ss <= 59): return None
    return hh, mm, ss

def parse_gsheet_date(raw) -> Optional[date]:
    if raw is None: return None
    s = str(raw).strip()
    if s in BAD_TOKENS: return None
    # serial number
    try:
        if isinstance(raw, (int, float)):
            base = datetime(1899,12,30)
            return (base + timedelta(days=float(raw))).date()
    except Exception:
        pass
    # text date
    for fmt in ("%Y-%m-%d","%d/%m/%Y","%d-%m-%Y","%Y/%m/%d"):
        try:
            return datetime.strptime(s, fmt).date()
        except Exception:
            continue
    return None

def parse_kill_dt(raw) -> Optional[datetime]:
    """‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ kill_dt ‡∏à‡∏≤‡∏Å‡∏ä‡∏µ‡∏ï‡πÄ‡∏õ‡πá‡∏ô datetime (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö serial ‡πÅ‡∏•‡∏∞‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡πá‡∏ï)"""
    if raw is None:
        return None
    s = str(raw).strip()
    if s in BAD_TOKENS:
        return None
    # serial (Google Sheets)
    try:
        if isinstance(raw, (int, float)):
            base = datetime(1899, 12, 30)
            return tz.localize(base + timedelta(days=float(raw)))
    except Exception:
        pass
    # ‡∏´‡∏•‡∏≤‡∏¢‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡πá‡∏ï‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢
    for fmt in (
        "%d/%m/%Y, %H:%M:%S", "%d/%m/%Y %H:%M:%S",
        "%d/%m/%Y, %H:%M",    "%d/%m/%Y %H:%M",
        "%Y-%m-%d %H:%M:%S",  "%Y-%m-%d %H:%M",
    ):
        try:
            return tz.localize(datetime.strptime(s, fmt))
        except Exception:
            continue
    return None

def near_same_minute(a: Optional[datetime], b: Optional[datetime], tol_min: int = 2) -> bool:
    """‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏Å‡∏±‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô tol_min ‡∏ô‡∏≤‡∏ó‡∏µ (‡πÉ‡∏ä‡πâ‡∏à‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ next/date = ‡πÄ‡∏ß‡∏•‡∏≤ kill)"""
    if not a or not b:
        return False
    return abs(int((a - b).total_seconds()) // 60) <= tol_min

def next_from_weekday_time(day_name: str, hh: int, mm: int, now_dt: datetime) -> datetime:
    wd = WEEKDAY_MAP.get(day_name)
    if wd is None: raise ValueError(f"‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ô: {day_name}")
    base = tz.localize(datetime(now_dt.year, now_dt.month, now_dt.day, hh, mm))
    cand = base + timedelta(days=(wd - now_dt.weekday()) % 7)
    if cand <= now_dt: cand += timedelta(days=7)
    return cand

def compute_next_interval(kill_dt: Optional[datetime], hours: Optional[int], now_dt: datetime) -> Optional[datetime]:
    """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏à‡∏≤‡∏Å kill_dt + hours (‡∏ó‡∏ö‡πÉ‡∏´‡πâ > ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ)"""
    if not kill_dt or not hours:
        return None
    dt = kill_dt + timedelta(hours=hours)
    if dt <= now_dt:
        diff_h = (now_dt - kill_dt).total_seconds() / 3600.0
        steps = int(diff_h // hours) + 1
        dt = kill_dt + timedelta(hours=hours * steps)
    return dt

def parse_weekly_pairs(detail: str) -> List[Tuple[str,str]]:
    """‡∏≠‡πà‡∏≤‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö '‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£ 10:30; ‡∏û‡∏§‡∏´‡∏±‡∏™ 18:00' ‡∏´‡∏£‡∏∑‡∏≠ '‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå 16:00-19:00' (‡πÉ‡∏ä‡πâ‡∏ï‡πâ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á)"""
    if not detail: return []
    parts = [p.strip() for p in str(detail).split(";") if p.strip()]
    out = []
    for p in parts:
        for day_th in WEEKDAY_MAP.keys():
            if p.startswith(day_th):
                rest = p[len(day_th):].strip()
                m = WINDOW_RE.search(rest)
                t = (m.group(1) if m else rest).strip()
                out.append((day_th, t))
                break
    return out

def _norm_header(s: str) -> str:
    # ‡∏•‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏õ‡∏•‡∏Å ‡πÜ ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å
    return re.sub(r"\s+", " ", str(s or "")).strip().lower()

def build_col_idx(headers: list) -> dict:
    norm = [_norm_header(h) for h in headers]

    def find(*cands):
        for c in cands:
            c = _norm_header(c)
            if c in norm:
                return norm.index(c)
        return None

    # ‡∏ä‡∏∏‡∏î‡∏´‡∏±‡∏ß‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ç‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
    return {
        "level":        find("level", "lvl", "‡πÄ‡∏•‡πÄ‡∏ß‡∏•"),
        "name":         find("name", "‡∏ä‡∏∑‡πà‡∏≠"),
        "location":     find("location", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà", "‡∏à‡∏∏‡∏î‡πÄ‡∏Å‡∏¥‡∏î", "‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà"),
        "kill_time":    find("kill_time", "‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏≤‡∏¢"),
        "next_spawn":   find("next_spawn", "‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ", "next"),
        "date_kill":    find("date_kill", "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏¢"),
        "date_spawn":   find("date_spawn", "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏±‡∏î‡πÑ‡∏õ", "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏ñ‡∏±‡∏î‡πÑ‡∏õ"),
        "spawn_type":   find("spawn_type", "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"),
        "spawn_detail": find("spawn_detail", "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"),
        "note":         find("note", "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏"),
        "kill_dt":      find("kill_dt", "kill datetime", "‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏≤‡∏¢‡πÄ‡∏ï‡πá‡∏°"),
    }


# ====== mapping ‡∏Ñ‡∏á‡∏ó‡∏µ‡πà ======
# A..K = [level, name, location, kill_time, next_spawn, date_kill, date_spawn, spawn_type, spawn_detail, note, kill_dt]
IDX = {
    "level":0, "name":1, "location":2, "kill_time":3, "next_spawn":4,
    "date_kill":5, "date_spawn":6, "spawn_type":7, "spawn_detail":8, "note":9, "kill_dt":10
}

# fixed ‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå (‡∏Å‡∏£‡∏ì‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏ï‡∏≤‡∏°‡∏ô‡∏µ‡πâ)
FIXED_WEEKLY_TIMES = {
    "‡∏Ñ‡∏•‡∏≤‡πÅ‡∏°‡∏ô‡∏ó‡∏µ‡∏™": [("‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå","10:30"), ("‡∏û‡∏§‡∏´‡∏±‡∏™","18:00")],
    "‡∏ã‡∏≤‡∏ü‡∏¥‡∏£‡∏±‡∏™":   [("‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå","16:00"), ("‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£","10:30")],
    "‡∏ô‡∏¥‡∏ß‡πÇ‡∏ó‡∏£":    [("‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£","18:00"), ("‡∏û‡∏§‡∏´‡∏±‡∏™","10:30")],
    "‡πÑ‡∏ò‡πÄ‡∏°‡∏•":     [("‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå","18:00"), ("‡∏û‡∏∏‡∏ò","10:30")],
    "‡∏°‡∏¥‡∏•‡∏•‡∏≤‡∏ß‡∏µ":   [("‡πÄ‡∏™‡∏≤‡∏£‡πå","14:00")],
    "‡∏£‡∏¥‡∏á‡∏Å‡∏≠‡∏£‡πå":   [("‡πÄ‡∏™‡∏≤‡∏£‡πå","16:00")],
    "‡πÇ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡∏¥‡∏Å":  [("‡∏®‡∏∏‡∏Å‡∏£‡πå","18:00")],
    "‡∏≠‡∏≠‡∏£‡∏±‡∏Ñ":     [("‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå","20:00"), ("‡∏û‡∏∏‡∏ò","20:00")],
}

# ‡πÄ‡∏ß‡∏¥‡∏•‡∏î‡πå‡∏ö‡∏≠‡∏™: ‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô 10:00 ‡πÅ‡∏•‡∏∞ 19:00
WORLD_DAILY_TIMES = ["10:00", "19:00"]

def fixed_bosses_next(now_dt: datetime) -> List[Tuple[str,str,datetime,str,str]]:
    """‡∏Ñ‡∏∑‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ fixed + world ‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ"""
    out = []
    # ‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ï‡∏≤‡∏°‡πÅ‡∏°‡πá‡∏û
    for name, pairs in FIXED_WEEKLY_TIMES.items():
        cands = []
        for day_th, hhmm in pairs:
            t = parse_time_of_day(hhmm)
            if not t: continue
            cands.append(next_from_weekday_time(day_th, t[0], t[1], now_dt))
        if cands:
            out.append(("Fixed", name, min(cands), "", ""))

    # ‡πÄ‡∏ß‡∏¥‡∏•‡∏î‡πå‡∏ö‡∏≠‡∏™
    wcands = []
    for t in WORLD_DAILY_TIMES:
        hh, mm, _ = parse_time_of_day(t)
        dt = tz.localize(datetime(now_dt.year, now_dt.month, now_dt.day, hh, mm))
        if dt <= now_dt: dt += timedelta(days=1)
        wcands.append(dt)
    w_dt = min(wcands)
    for name in WORLD_BOSSES:
        out.append(("Fixed", name, w_dt, "", ""))
    return out

def choose_ws(ss) -> str:
    """‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ó‡πá‡∏ö‡∏ó‡∏µ‡πà‡∏´‡∏±‡∏ß‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ñ‡∏£‡∏ö‡∏Ç‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å"""
    titles = [ws.title for ws in ss.worksheets()]

    # ‡∏™‡πÅ‡∏Å‡∏ô‡∏ó‡∏∏‡∏Å‡πÅ‡∏ó‡πá‡∏ö‡∏´‡∏≤‡πÅ‡∏ó‡πá‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏´‡∏±‡∏ß‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ñ‡∏£‡∏ö
    for ws in ss.worksheets():
        try:
            head_vals = ss.values_get(f"'{ws.title}'!A1:Z1").get("values", [])
            if not head_vals:
                continue
            col = build_col_idx(head_vals[0])
            needed = ("name", "spawn_type", "next_spawn", "date_spawn")
            if all(col.get(k) is not None for k in needed):
                log(f"[AUTO] ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ó‡πá‡∏ö '{ws.title}' (‡∏´‡∏±‡∏ß‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ñ‡∏£‡∏ö)")
                return ws.title
        except Exception:
            continue

    # ‡πÑ‡∏°‡πà‡∏û‡∏ö ‚Üí fallback (‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô)
    if PRIMARY_WS in titles:
        log(f"[WARN] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÅ‡∏ó‡πá‡∏ö‡∏´‡∏±‡∏ß‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ñ‡∏£‡∏ö ‡πÉ‡∏ä‡πâ '{PRIMARY_WS}' ‡πÅ‡∏ó‡∏ô")
        return PRIMARY_WS
    if FALLBACK_WS in titles:
        log(f"[WARN] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÅ‡∏ó‡πá‡∏ö‡∏´‡∏±‡∏ß‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ñ‡∏£‡∏ö ‡πÉ‡∏ä‡πâ '{FALLBACK_WS}' (interval ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏≠‡πà‡∏≤‡∏ô)")
        return FALLBACK_WS

    raise RuntimeError("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÅ‡∏ó‡πá‡∏ö‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ name/spawn_type/next_spawn/date_spawn)")


# ========= ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• + ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ =========
def get_boss_from_sheet(max_retry=3):
    """
    ‡∏Ñ‡∏∑‡∏ô [(ws_name, name, spawn_dt, level, location)]

    ‡∏Å‡∏ï‡∏¥‡∏Å‡∏≤:
    - ‡πÄ‡∏ï‡∏¥‡∏° Fixed (‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå + ‡πÄ‡∏ß‡∏¥‡∏•‡∏î‡πå‡∏ö‡∏≠‡∏™ 10:00/19:00) ‡∏à‡∏≤‡∏Å fixed_bosses_next() ‡∏Å‡πà‡∏≠‡∏ô
    - interval: ‡πÉ‡∏ä‡πâ next_spawn + date_spawn ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å
        * ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏Å‡∏•‡πâ kill_dt (¬±2 ‡∏ô‡∏≤‡∏ó‡∏µ) ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏î‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏¢‡πâ‡∏≠‡∏ô‡∏≠‡∏î‡∏µ‡∏ï ‚Üí fallback ‡πÄ‡∏õ‡πá‡∏ô kill_dt + X ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
        * ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ next/date ‡πÄ‡∏•‡∏¢ ‚Üí fallback ‡πÄ‡∏õ‡πá‡∏ô kill_dt + X ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    - fixed: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å spawn_detail (‡∏Ñ‡∏π‡πà‡∏ß‡∏±‡∏ô/‡πÄ‡∏ß‡∏•‡∏≤) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö fixed ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÅ‡∏°‡πá‡∏û
    - ‡∏≠‡∏∑‡πà‡∏ô‡πÜ: ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ date+time ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
    """
    bosses, seen = [], set()
    now_dt = datetime.now(tz)

    # 1) ‡πÄ‡∏ï‡∏¥‡∏° fixed ‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå + worldboss ‡∏à‡∏≤‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î
    for ws_name, name, dt, level, location in fixed_bosses_next(now_dt):
        k = f"{name}|{dt.strftime('%Y%m%d%H%M')}"
        if k not in seen:
            seen.add(k)
            bosses.append((ws_name, name, dt, level, location))

    # 2) ‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏ä‡∏µ‡∏ï (map ‡∏î‡πâ‡∏ß‡∏¢‡∏´‡∏±‡∏ß‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏à‡∏£‡∏¥‡∏á)
    client, _ = gspread_client()
    ss, _ = open_spreadsheet(client)
    ws_name = choose_ws(ss)

    for i in range(max_retry):
        try:
            rows = values_get_ws(ss, ws_name, READ_RANGE)
            if not rows or len(rows) < 2:
                log(f"[WARN] '{ws_name}' ‡∏ß‡πà‡∏≤‡∏á")
                break

            header = rows[0]
            col = build_col_idx(header)
            log(f"[DEBUG] ‡πÉ‡∏ä‡πâ‡πÅ‡∏ó‡πá‡∏ö: {ws_name}")
            log(f"[DEBUG] header: {header}")
            log(f"[DEBUG] colmap: {col}")

            def cell(row, key):
                idx = col.get(key)
                if idx is None or idx >= len(row):
                    return ""
                return row[idx]

            # ‡∏Ç‡πâ‡∏≤‡∏°‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å
            for r in rows[1:]:
                name = (cell(r, "name") or "").strip()
                if not name or name in BAD_TOKENS:
                    continue

                # worldboss ‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å fixed_bosses_next ‡πÅ‡∏•‡πâ‡∏ß ‚Äî ‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≥
                if is_world_boss(name):
                    continue

                level     = (str(cell(r, "level")) or "").strip()
                location  = (cell(r, "location") or "").strip()
                sp_type   = (str(cell(r, "spawn_type")) or "").strip().lower()
                detail    = (cell(r, "spawn_detail") or "").strip()
                raw_date  = cell(r, "date_spawn")
                raw_next  = cell(r, "next_spawn")
                kill_dt   = parse_kill_dt(cell(r, "kill_dt"))

                d  = parse_gsheet_date(raw_date)
                t  = parse_time_of_day(raw_next)
                dt = None

                if sp_type == "fixed":
                    # fixed: ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏π‡πà‡∏ß‡∏±‡∏ô/‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô spawn_detail
                    pairs = parse_weekly_pairs(detail)
                    cands = []
                    for day_th, hhmm in pairs:
                        tm = parse_time_of_day(hhmm)
                        if not tm:
                            continue
                        cands.append(next_from_weekday_time(day_th, tm[0], tm[1], now_dt))
                    if cands:
                        dt = min(cands)

                elif sp_type == "interval":
                    # interval: ‡πÉ‡∏ä‡πâ next_spawn + date_spawn ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å
                    m = HOURS_RE.search(detail or "")
                    hours = int(m.group(1)) if m else None

                    if d and t:
                        cand = tz.localize(datetime(d.year, d.month, d.day, t[0], t[1], t[2]))
                        # ‡∏ñ‡πâ‡∏≤ cand ‡πÉ‡∏Å‡∏•‡πâ kill_dt ‡∏´‡∏£‡∏∑‡∏≠ cand ‡∏¢‡πâ‡∏≠‡∏ô‡∏≠‡∏î‡∏µ‡∏ï ‚Üí fallback ‡πÄ‡∏õ‡πá‡∏ô kill_dt + ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
                        if ((kill_dt and near_same_minute(cand, kill_dt)) or cand <= now_dt) and hours:
                            dt = compute_next_interval(kill_dt, hours, now_dt)
                        else:
                            dt = cand

                    elif t and not d:
                        cand = tz.localize(datetime(now_dt.year, now_dt.month, now_dt.day, t[0], t[1], t[2]))
                        if cand <= now_dt:
                            cand += timedelta(days=1)
                        if kill_dt and near_same_minute(cand, kill_dt) and hours:
                            dt = compute_next_interval(kill_dt, hours, now_dt)
                        else:
                            dt = cand

                    # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ dt ‡πÅ‡∏•‡∏∞‡∏°‡∏µ kill_dt+hours ‚Üí ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô fallback
                    if dt is None and hours and kill_dt:
                        dt = compute_next_interval(kill_dt, hours, now_dt)

                else:
                    # ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏∑‡πà‡∏ô: ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ date+time ‡∏Å‡πá‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏¢
                    if d and t:
                        dt = tz.localize(datetime(d.year, d.month, d.day, t[0], t[1], t[2]))
                    elif t and not d:
                        cand = tz.localize(datetime(now_dt.year, now_dt.month, now_dt.day, t[0], t[1], t[2]))
                        if cand <= now_dt:
                            cand += timedelta(days=1)
                        dt = cand

                # ‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ/‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á
                if not dt or dt <= now_dt:
                    continue

                k = f"{name}|{dt.strftime('%Y%m%d%H%M')}"
                if k in seen:
                    continue
                seen.add(k)
                bosses.append((ws_name, name, dt, level, location))
            break

        except Exception as e:
            log(f"[ERROR] ‡∏≠‡πà‡∏≤‡∏ô '{ws_name}' ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà {i+1}: {e}")
            time.sleep(2)

    bosses.sort(key=lambda x: x[2])
    log(f"‡πÇ‡∏´‡∏•‡∏î {len(bosses)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡∏à‡∏≤‡∏Å‡πÅ‡∏ó‡πá‡∏ö: ['{ws_name}', 'Fixed']")
    return bosses



# ========= ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô =========
alerted = set()

@tasks.loop(seconds=60)
async def check_alerts():
    try:
        now = datetime.now(tz)
        bosses = get_boss_from_sheet()

        # ‡πÄ‡∏ß‡∏¥‡∏•‡∏î‡πå‡∏ö‡∏≠‡∏™: ‡∏£‡∏ß‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ T-5
        world_groups = {}
        for ws, name, spawn_dt, *_ in bosses:
            if is_world_boss(name) and ws == "Fixed":
                key = spawn_dt.strftime("%Y%m%d-%H%M")
                world_groups.setdefault(key, {"dt": spawn_dt, "names": set(), "ws": ws})
                world_groups[key]["names"].add(normalize_name(name))

        for key, info in world_groups.items():
            if info["names"] == WORLD_BOSSES:
                spawn_dt = info["dt"]
                delta = (spawn_dt - now).total_seconds()
                th_sec = 5 * 60
                alert_key = f"group:{key}_T5"
                if (th_sec - ALERT_WINDOW_SEC) < delta <= (th_sec + ALERT_WINDOW_SEC) and alert_key not in alerted:
                    alerted.add(alert_key)
                    channel_id = SHEET_CHANNEL_MAP.get(info["ws"], CHANNEL_ID_DEFAULT)
                    ch = bot.get_channel(channel_id) or await bot.fetch_channel(channel_id)
                    embed = discord.Embed(
                        title=f"{WORLD_EMOJI} Worldboss: ‡∏•‡∏≤‡∏ï‡∏±‡∏ô, ‡∏û‡∏≤‡∏£‡πå‡πÇ‡∏ï, ‡πÄ‡∏ô‡∏î‡∏£‡πâ‡∏≤",
                        description="‚è∞ ‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ",
                        color=DEFAULT_EMBED_COLOR
                    )
                    mention = f"<@&{ROLE_ID_1}> <@&{ROLE_ID_2}>"
                    try:
                        await ch.send(content=mention, embed=embed)
                        log("[WorldBoss] ‡πÅ‡∏à‡πâ‡∏á‡∏£‡∏ß‡∏° T-5m")
                    except Exception as e:
                        log(f"[ERROR] ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏£‡∏ß‡∏°‡∏ö‡∏≠‡∏™‡πÇ‡∏•‡∏Å T-5: {e}")

        # ‡∏£‡∏≤‡∏¢‡∏ï‡∏±‡∏ß 60/30/5 (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡πÄ‡∏ß‡∏¥‡∏•‡∏î‡πå‡∏ö‡∏≠‡∏™)
        for ws, name, spawn_dt, level, location in bosses:
            if is_world_boss(name):
                continue
            delta = (spawn_dt - now).total_seconds()
            if delta <= 0:
                continue
            for th_min in ALERT_THRESHOLDS_MIN:
                th_sec = th_min * 60
                key = f"{ws}:{name}_{spawn_dt.strftime('%Y%m%d-%H%M')}_T{th_min}"
                if (th_sec - ALERT_WINDOW_SEC) < delta <= (th_sec + ALERT_WINDOW_SEC) and key not in alerted:
                    alerted.add(key)
                    channel_id = SHEET_CHANNEL_MAP.get(ws, CHANNEL_ID_DEFAULT)
                    ch = bot.get_channel(channel_id) or await bot.fetch_channel(channel_id)
                    title = f"üìÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô: {name}" + (f" Lv.{level}" if level else "")
                    desc = []
                    if location: desc.append(f"üìç {location}")
                    desc.append(f"üïò ‡∏£‡∏≠‡∏ö‡∏ï‡πà‡∏≠‡πÑ‡∏õ: {spawn_dt.strftime('%H:%M')} ({weekday_th(spawn_dt)} {spawn_dt.strftime('%d/%m')})")
                    desc.append(f"‚è∞ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ {th_min} ‡∏ô‡∏≤‡∏ó‡∏µ")
                    embed = discord.Embed(title=title, description="\n".join(desc), color=DEFAULT_EMBED_COLOR)
                    try:
                        if th_min == 5:
                            mention = f"<@&{ROLE_ID_1}> <@&{ROLE_ID_2}>"
                            await ch.send(content=mention, embed=embed)
                        else:
                            await ch.send(embed=embed)
                        log(f"[{ws}] ‡πÅ‡∏à‡πâ‡∏á {name} T-{th_min}m")
                    except Exception as e:
                        log(f"[ERROR] ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô {name} T-{th_min}: {e}")
    except Exception as e:
        log(f"[ERROR] check_alerts crash: {e}")

# ========= Commands =========
@bot.command()
async def ping(ctx):
    await ctx.send("‚úÖ ‡∏ö‡∏≠‡∏ó‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà")

@bot.command()
async def boss(ctx):
    """‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ '‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ' ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≤‡∏°‡∏ß‡∏±‡∏ô (‡∏£‡∏ß‡∏° Fixed + ‡∏ä‡∏µ‡∏ï‡∏ï‡∏≤‡∏°‡∏Å‡∏ï‡∏¥‡∏Å‡∏≤‡πÉ‡∏´‡∏°‡πà)"""
    now = datetime.now(tz)
    bosses = get_boss_from_sheet()
    embed = discord.Embed(title="üïí ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏Å‡∏¥‡∏î‡∏ñ‡∏±‡∏î‡πÑ‡∏õ", color=0x00ccff)

    # ‡∏£‡∏ß‡∏° worldboss ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 1 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
    world_groups, used = {}, set()
    for ws, name, spawn_dt, *_ in bosses:
        if is_world_boss(name) and ws == "Fixed":
            key = spawn_dt.strftime("%Y%m%d-%H%M")
            world_groups.setdefault(key, {"dt": spawn_dt, "names": set()})
            world_groups[key]["names"].add(normalize_name(name))

    count = 0
    for ws, name, spawn_dt, level, location in bosses:
        delta_m = int((spawn_dt - now).total_seconds()//60)
        if delta_m <= 0:
            continue

        if is_world_boss(name) and ws == "Fixed":
            key = spawn_dt.strftime("%Y%m%d-%H%M")
            if key in used: 
                continue
            if world_groups.get(key, {}).get("names") == WORLD_BOSSES:
                embed.add_field(
                    name=f"{WORLD_EMOJI} Worldboss",
                    value=f"{spawn_dt.strftime('%H:%M')} ({weekday_th(spawn_dt)} {spawn_dt.strftime('%d/%m')}) ‚Ä¢ ‡∏•‡∏≤‡∏ï‡∏±‡∏ô ‚Ä¢ ‡∏û‡∏≤‡∏£‡πå‡πÇ‡∏ï ‚Ä¢ ‡πÄ‡∏ô‡∏î‡∏£‡πâ‡∏≤ ‚Ä¢ ‡∏≠‡∏µ‡∏Å {delta_m} ‡∏ô‡∏≤‡∏ó‡∏µ",
                    inline=False
                )
                used.add(key)
                count += 1
            continue

        title = f"{NORMAL_EMOJI} {name}" + (f" ‚Ä¢ Lv.{level}" if level else "")
        line  = f"{spawn_dt.strftime('%H:%M')} ({weekday_th(spawn_dt)} {spawn_dt.strftime('%d/%m')})"
        if location: line += f" ‚Ä¢ {location}"
        line += f" ‚Ä¢ ‡∏≠‡∏µ‡∏Å {delta_m} ‡∏ô‡∏≤‡∏ó‡∏µ"
        embed.add_field(name=title, value=line, inline=False)
        count += 1
        if count >= 25:
            break

    if count == 0:
        embed.description = "‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏≠‡∏™‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡∏ñ‡∏±‡∏î‡πÑ‡∏õ"
    embed.set_footer(text="‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏°‡∏∑‡πà‡∏≠ " + now.strftime("%d/%m/%Y %H:%M"))
    await ctx.send(embed=embed)

# === ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á ===
@bot.command()
@has_permissions(manage_messages=True)
async def deleteall(ctx):
    allowed_channels = set(SHEET_CHANNEL_MAP.values()) | {CHANNEL_ID_DEFAULT}
    if ctx.channel.id not in allowed_channels:
        await ctx.send("‚ùå ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ö‡∏≠‡∏™‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô", delete_after=10)
        return

    class ConfirmDelete(View):
        @discord.ui.button(label="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏•‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", style=discord.ButtonStyle.danger)
        async def confirm(self, interaction: Interaction, button: Button):
            if interaction.user != ctx.author:
                await interaction.response.send_message("‚õî ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ú‡∏π‡πâ‡∏™‡∏±‡πà‡∏á‡∏•‡∏ö", ephemeral=True)
                return
            deleted = 0
            async for msg in ctx.channel.history(limit=None):
                try:
                    await msg.delete()
                    deleted += 1
                    await asyncio.sleep(0.3)
                except:
                    pass
            await interaction.channel.send(f"üßπ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß ({deleted} ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°)", delete_after=10)
            self.stop()

        @discord.ui.button(label="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", style=discord.ButtonStyle.secondary)
        async def cancel(self, interaction: Interaction, button: Button):
            if interaction.user != ctx.author:
                await interaction.response.send_message("‚õî ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡∏ô‡∏™‡∏±‡πà‡∏á", ephemeral=True)
                return
            await interaction.response.edit_message(content="‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß", view=None)
            self.stop()

    await ctx.send("‚ö†Ô∏è ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πà‡πÑ‡∏´‡∏°?", view=ConfirmDelete())

# ========= Debug =========
def debug_list_tabs():
    try:
        client, creds = gspread_client()
        ss, how = open_spreadsheet(client)
        tabs = [ws.title for ws in ss.worksheets()]
        sa_email = getattr(creds, "_service_account_email", "(unknown)")
        log(f"[DEBUG] Opened by {how}. Worksheets: {tabs}")
        log(f"[DEBUG] Service Account email (‡πÅ‡∏ä‡∏£‡πå‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ): {sa_email}")
    except gspread.exceptions.SpreadsheetNotFound:
        log("[DEBUG] SpreadsheetNotFound: ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚Äî ‡∏ï‡∏£‡∏ß‡∏à ID/URL/NAME ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏£‡πå‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå")
    except Exception as e:
        log(f"[DEBUG] list tabs error: {type(e).__name__}: {e}")

# ========= Lifecycle =========
@bot.event
async def on_ready():
    log(f"‚úÖ Logged in as {bot.user}")
    debug_list_tabs()
    if not check_alerts.is_running():
        check_alerts.start()

# ========= Run =========
if __name__ == "__main__":
    bot.run(TOKEN)
